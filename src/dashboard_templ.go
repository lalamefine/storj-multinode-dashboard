// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.894
package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "encoding/json"
import "fmt"

func DashboardPage(data DashboardData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><link rel=\"icon\" type=\"image/png\" href=\"https://cdn.prod.website-files.com/65d78d3b8dbb1f54a94020c7/660e34e73c1859e2a3f19840_storj-favicon-lt.png\"><title>Dynamic Multi-Endpoint Dashboard</title><!-- Tailwind CSS --><script src=\"https://cdn.tailwindcss.com\"></script><!-- Chart.js --><script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script></head><body class=\"bg-slate-800 font-sans\"><div id=\"app\" class=\"container-fluid mx-auto p-4 lg:p-8 xl:px-12 opacity-90\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.Error != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div id=\"message-container\" class=\"text-center\"><h2 class=\"text-2xl font-semibold text-gray-700\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Error)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 24, Col: 81}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</h2><p class=\"mt-2 text-gray-500\">Please specify valid nodes in the URL or in an environment variable \"NODES\"</p><p class=\"mt-4 text-left bg-gray-200 p-4 rounded-lg text-sm text-gray-600\"><strong>Exemple:</strong><br>?Node1=192.168.1.10:14001&Node2=192.168.1.10:14002</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div><div id=\"charts-container\" class=\"grid grid-cols-1 md:grid-cols-2 gap-2 lg:gap-4\"><!-- Bandwidth Chart Card --><div class=\"bg-white rounded-lg shadow-lg p-4 md:p-6\"><h2 class=\"lg:text-xl font-semibold text-gray-700 lg:mb-4\">Bandwidth Usage</h2><div class=\"relative h-40 md:h-52 xl:h-80\"><canvas id=\"bandwidthChart\"></canvas></div></div><!-- Disk Space Chart Card --><div class=\"bg-white rounded-lg shadow-lg p-4 md:p-6\"><h2 class=\"lg:text-xl font-semibold text-gray-700 lg:mb-4\">Disk Space Usage</h2><div class=\"relative h-40 md:h-52 xl:h-80\"><canvas id=\"diskSpaceChart\"></canvas></div></div></div><!-- Earnings Section --><div class=\"mt-2 lg:mt-4\"><div class=\"grid grid-cols-1 md:grid-cols-2 gap-2 lg:gap-4\"><div class=\"grid grid-cols-2 md:grid-cols-1 gap-2\"><div class=\"bg-white rounded-lg p-2 lg:p-5 shadow-md text-center border-t-4 border-blue-500\"><p class=\"text-sm text-gray-500 mb-2\">Current Month Earnings</p><p class=\"text-xl lg:text-3xl font-bold text-blue-600\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", (data.EarningsPayouts.CurrentMonthTotal)/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 56, Col: 159}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</p></div><div class=\"bg-white rounded-lg p-2 lg:p-5 shadow-md text-center border-t-4 border-purple-500\"><p class=\"text-sm text-gray-500 mb-2\">Total Held</p><p class=\"text-xl lg:text-3xl font-bold text-purple-600\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", data.EarningsPayouts.TotalHeld/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 60, Col: 153}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</p></div></div><div class=\"bg-white rounded-lg p-2 lg:p-5 shadow-md text-center border-t-4 border-green-500\"><p class=\"text-sm text-gray-500 mb-2\">Total Earned</p><p class=\"text-xl lg:text-3xl font-bold text-green-600 mb-2\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", (data.EarningsPayouts.CurrentMonthTotal+data.EarningsPayouts.PreviousMonthTotal)/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 65, Col: 203}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</p><div class=\"grid grid-cols-3 gap-2\"><div><p class=\"text-sm text-gray-500 mb-1\">Egress</p><div class=\"lg:text-xl font-bold text-gray-700\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", data.EarningsPayouts.EgressBandwidthPayout/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 71, Col: 158}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</div></div><div><p class=\"text-sm text-gray-500 mb-1\">Egress (Repair & Audit)</p><div class=\"lg:text-xl font-bold text-gray-700\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", data.EarningsPayouts.EgressRepairAuditPayout/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 78, Col: 160}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div></div><div><p class=\"text-sm text-gray-500 mb-1\">Storage</p><div class=\"lg:text-xl font-bold text-gray-700\">$")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%.2f", data.EarningsPayouts.DiskSpacePayout/100))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 85, Col: 152}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "</div></div></div></div></div></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if data.Error == "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<script>\r\n                // Données fournies par le serveur\r\n                const nodesData = JSON.parse(")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Var9, templ_7745c5c3_Err := templruntime.ScriptContentOutsideStringLiteral(marshalJSON(data.Nodes))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `src/Dashboard.templ`, Line: 99, Col: 71}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var9)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, ");\r\n\r\n                document.addEventListener('DOMContentLoaded', () => {\r\n                    // Traitement des données et initialisation des graphiques\r\n                    const chartData = processDataForCharts(nodesData);\r\n                    renderCharts(chartData);\r\n                });\r\n\r\n                /**\r\n                * Affiche les graphiques avec les données\r\n                */\r\n                function renderCharts(chartData) {\r\n                    const bandwidthCtx = document.getElementById('bandwidthChart').getContext('2d');\r\n                    const bandwidthOptions = {\r\n                        ...commonChartOptions,\r\n                        scales: {\r\n                            ...commonChartOptions.scales,\r\n                            x: { stacked: true },\r\n                            y: { \r\n                                stacked: true,\r\n                                beginAtZero: true,\r\n                                ticks: { callback: formatAxisTick }\r\n                            }\r\n                        }\r\n                    };\r\n                    \r\n                    const bandwidthChart = new Chart(bandwidthCtx, {\r\n                        type: 'bar',\r\n                        data: {\r\n                            labels: chartData.labels,\r\n                            datasets: chartData.bandwidth.datasets,\r\n                        },\r\n                        options: bandwidthOptions\r\n                    });\r\n\r\n                    const diskSpaceCtx = document.getElementById('diskSpaceChart').getContext('2d');\r\n                    const diskSpaceOptions = {\r\n                        ...commonChartOptions,\r\n                        scales: {\r\n                            ...commonChartOptions.scales,\r\n                            x: { stacked: true },\r\n                            y: { \r\n                                stacked: true,\r\n                                beginAtZero: true,\r\n                                ticks: { callback: formatAxisTick }\r\n                            }\r\n                        }\r\n                    };\r\n                    \r\n                    const diskSpaceChart = new Chart(diskSpaceCtx, {\r\n                        type: 'bar',\r\n                        data: {\r\n                            labels: chartData.labels,\r\n                            datasets: chartData.storage.datasets,\r\n                        },\r\n                        options: diskSpaceOptions\r\n                    });\r\n                }\r\n                \r\n                // Fonction pour formater les octets avec des unités compactes\r\n                function formatBytes(bytes, decimals = 2) {\r\n                    if (!+bytes) return '0';\r\n                    const k = 1024;\r\n                    const dm = decimals < 0 ? 0 : decimals;\r\n                    const sizes = ['', 'k', 'M', 'G', 'T', 'P'];\r\n                    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n                    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))}${sizes[i]}`;\r\n                }\r\n\r\n                // Traiter les données pour les graphiques\r\n                function processDataForCharts(nodes) {\r\n                    const allDates = new Set();\r\n                    const bandwidthDataByDate = {};\r\n                    const storageDataByDate = {};\r\n\r\n                    nodes.forEach(node => {\r\n                        // Traitement des données de bande passante\r\n                        if (node.bandwidthData) {\r\n                            node.bandwidthData.forEach(item => {\r\n                                const date = item.intervalStart.split('T')[0];\r\n                                allDates.add(date);\r\n                                if (!bandwidthDataByDate[date]) bandwidthDataByDate[date] = {};\r\n                                const egressUsage = (item.egress.usage || 0) + (item.egress.repair || 0) + (item.egress.audit || 0);\r\n                                const ingressUsage = (item.ingress.usage || 0) + (item.ingress.repair || 0);\r\n                                bandwidthDataByDate[date][node.name] = { egress: egressUsage, ingress: ingressUsage };\r\n                            });\r\n                        }\r\n                        \r\n                        // Traitement des données de stockage\r\n                        if (node.storageData) {\r\n                            node.storageData.forEach(item => {\r\n                                const date = item.intervalStart.split('T')[0];\r\n                                allDates.add(date);\r\n                                if (!storageDataByDate[date]) storageDataByDate[date] = {};\r\n                                storageDataByDate[date][node.name] = item.atRestTotalBytes || 0;\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    const sortedLabels = Array.from(allDates).sort();\r\n                    \r\n                    const bandwidthDatasets = [];\r\n                    const storageDatasets = [];\r\n                    \r\n                    // Generate blue shades based on node index and total nodes\r\n                    function getShade(index, total, shade) {\r\n                        const minHue = 40, maxHue = 220;\r\n                        const hue = minHue + ((maxHue - minHue) * (index / Math.max(1, total - 1)));\r\n                        const bg = `hsla(${hue}, ${shade}, 65%, 1)`;\r\n                        const border = `hsla(${hue}, ${shade}, 65%, 1)`;\r\n                        return { bg, border };\r\n                    }\r\n                    const colorsStorage = nodes.map((_, i) => getShade(i, nodes.length, '80%'));\r\n                    const colorsIngress = nodes.map((_, i) => getShade(i, nodes.length, '60%'));\r\n                    const colorsEgress = nodes.map((_, i) => getShade(i, nodes.length, '40%'));\r\n\r\n                    nodes.forEach((node, index) => {\r\n                        const egressData = sortedLabels.map(date => (bandwidthDataByDate[date] && bandwidthDataByDate[date][node.name]) ? bandwidthDataByDate[date][node.name].egress : 0);\r\n                        const ingressData = sortedLabels.map(date => (bandwidthDataByDate[date] && bandwidthDataByDate[date][node.name]) ? bandwidthDataByDate[date][node.name].ingress : 0);\r\n                        \r\n                        bandwidthDatasets.push({ label: `${node.name} - Egress`, data: egressData, backgroundColor: colorsEgress[index].bg, stack: 'Egress' });\r\n                        bandwidthDatasets.push({ label: `${node.name} - Ingress`, data: ingressData, backgroundColor: colorsIngress[index].bg, stack: 'Ingress' });\r\n\r\n                        const storageData = sortedLabels.map(date => (storageDataByDate[date] && storageDataByDate[date][node.name]) ? storageDataByDate[date][node.name] : null);\r\n                        storageDatasets.push({ label: `${node.name} - Disk`, data: storageData, borderColor: colorsStorage[index].border, backgroundColor: colorsStorage[index].bg });\r\n                    });\r\n\r\n                    return { \r\n                        labels: sortedLabels.map(d => new Date(d).toLocaleDateString()), \r\n                        bandwidth: { datasets: bandwidthDatasets }, \r\n                        storage: { datasets: storageDatasets } \r\n                    };\r\n                }\r\n                \r\n                const commonChartOptions = {\r\n                    responsive: true,\r\n                    maintainAspectRatio: false,\r\n                    plugins: { \r\n                        legend: { position: 'top' }, \r\n                        tooltip: { \r\n                            callbacks: { \r\n                                label: (context) => {\r\n                                    if (!+context.parsed.y) return `${context.dataset.label || ''}: 0 Bytes`;\r\n                                    const k = 1024;\r\n                                    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\r\n                                    const i = Math.floor(Math.log(context.parsed.y) / Math.log(k));\r\n                                    return `${context.dataset.label || ''}: ${parseFloat((context.parsed.y / Math.pow(k, i)).toFixed(2))} ${sizes[i]}`;\r\n                                }\r\n                            } \r\n                        } \r\n                    },\r\n                    scales: { \r\n                        y: { \r\n                            beginAtZero: true, \r\n                            ticks: { \r\n                                callback: formatAxisTick\r\n                            } \r\n                        } \r\n                    }\r\n                };\r\n\r\n                // Fonction dédiée pour le formatage des ticks d'axe\r\n                function formatAxisTick(value, index, ticks) {\r\n                    if (value === 0) return '0';\r\n                    if (!value || isNaN(value)) return '';\r\n                    \r\n                    const k = 1024;\r\n                    const sizes = ['', 'k', 'M', 'G', 'T', 'P'];\r\n                    \r\n                    // Déterminer l'indice de l'unité (0=Bytes, 1=KB, 2=MB, etc.)\r\n                    const i = Math.floor(Math.log(Math.abs(value)) / Math.log(k));\r\n                    \r\n                    // Formatter le nombre (avec 1 décimale) + unité\r\n                    const formattedValue = (value / Math.pow(k, i)).toFixed(1);\r\n                    \r\n                    // Supprimer le .0 si nécessaire pour un affichage plus propre\r\n                    return (formattedValue.endsWith('.0') ? formattedValue.slice(0, -2) : formattedValue) + sizes[Math.min(i, sizes.length - 1)];\r\n                }\r\n            </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func marshalJSON(v interface{}) string {
	data, err := json.Marshal(v)
	if err != nil {
		return "[]"
	}
	return string(data)
}

var _ = templruntime.GeneratedTemplate
